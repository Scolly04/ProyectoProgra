@model List<TuProyecto.Models.Estudiante>
@{
    ViewData["Title"] = "Lista de Estudiantes";
}

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" />
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

<div class="container mt-5">
    <div class="card shadow border-0 rounded-4">
        <div class="card-header bg-dark text-white text-center">
            <h3 class="mb-0"><i class="fas fa-list"></i> Lista de Estudiantes</h3>
        </div>
        <div class="card-body p-4">
            <table class="table table-hover table-bordered align-middle text-center">
                <thead class="table-primary">
                    <tr>
                        <th>Id</th>
                        <th>Nombre</th>
                        <th>Apellido</th>
                        <th>Edad</th>
                        <th>Correo</th>
                        <th>Acciones</th>
                    </tr>
                </thead>
                <tbody>
                    @if (Model.Any())
                    {
                        foreach (var estudiante in Model)
                        {
                            <tr>
                                <td>@estudiante.Id</td>
                                <td>@estudiante.Nombre</td>
                                <td>@estudiante.Apellido</td>
                                <td>@estudiante.Edad</td>
                                <td>@estudiante.Correo</td>
                                <td>
                                    <button class="btn btn-info btn-sm" onclick="verDetalles(@estudiante.Id)">Ver</button>
                                    <button class="btn btn-warning btn-sm" onclick="editarEstudiante(@estudiante.Id)">Editar</button>
                                    <form id="formEliminar-@estudiante.Id" asp-action="Eliminar" asp-route-id="@estudiante.Id" method="post" style="display:inline;">
                                        @Html.AntiForgeryToken()
                                        <button type="button" class="btn btn-danger btn-sm" onclick="confirmarEliminar(@estudiante.Id)">Eliminar</button>
                                    </form>
                                </td>
                            </tr>
                        }
                    }
                    else
                    {
                        <tr>
                            <td colspan="6" class="text-muted">No hay estudiantes registrados</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
</div>

<script>
    function verDetalles(id) {
        fetch(`/RegistroEstudiantes/Detalles/${id}`)
            .then(res => res.json())
            .then(data => {
                Swal.fire({
                    title: 'Detalles del Estudiante',
                    html: `<b>Nombre:</b> ${data.nombre} <br>
                           <b>Apellido:</b> ${data.apellido} <br>
                           <b>Edad:</b> ${data.edad} <br>
                           <b>Correo:</b> ${data.correo}`,
                    icon: 'info'
                });
            });
    }

    function editarEstudiante(id) {
        fetch(`/RegistroEstudiantes/ObtenerParaEditar/${id}`)
            .then(res => res.json())
            .then(data => {
                Swal.fire({
                    title: 'Editar Estudiante',
                    html:
                        `<input id="nombre" class="swal2-input" value="${data.nombre}">
                         <input id="apellido" class="swal2-input" value="${data.apellido}">
                         <input id="edad" type="number" class="swal2-input" value="${data.edad}">
                         <input id="correo" type="email" class="swal2-input" value="${data.correo}">`,
                    showCancelButton: true,
                    confirmButtonText: 'Guardar',
                    preConfirm: () => {
                        const estudiante = {
                            Id: id,
                            Nombre: document.getElementById('nombre').value,
                            Apellido: document.getElementById('apellido').value,
                            Edad: parseInt(document.getElementById('edad').value),
                            Correo: document.getElementById('correo').value
                        };
                        return fetch('/RegistroEstudiantes/Editar', {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify(estudiante)
                        });
                    }
                }).then(() => location.reload());
            });
    }

    function confirmarEliminar(id) {
        Swal.fire({
            title: '¿Está seguro?',
            text: 'Esta acción eliminará al estudiante de forma permanente.',
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#d33',
            cancelButtonColor: '#3085d6',
            confirmButtonText: 'Sí, eliminar'
        }).then((result) => {
            if (result.isConfirmed) {
                document.getElementById(`formEliminar-${id}`).submit();
            }
        });
    }

    @if (TempData["SweetAlertMessage"] != null)
    {
            <text>
                Swal.fire({
                    icon: '@TempData["SweetAlertIcon"]',
                    title: '@TempData["SweetAlertMessage"]',
                    timer: 2000,
                    showConfirmButton: false
                });
            </text>
    }
</script>
