@model List<TuProyecto.Models.Estudiante>
@{
    ViewData["Title"] = "Lista de Estudiantes";
}

<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet" />
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" />
<script src="https://code.jquery.com/jquery-3.6.4.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

@Html.AntiForgeryToken()

<style>
    .card {
        border-radius: 12px;
    }

    .table thead th {
        background: linear-gradient(45deg,#4e73df,#1cc88a);
        color: #fff;
    }

    .btn {
        border-radius: 12px;
    }

        .btn .fa {
            margin-right: 6px;
        }

    .table-hover tbody tr:hover {
        background: rgba(0,0,0,0.03);
    }
</style>

<div class="container mt-4">
    <div class="card shadow-sm border-0">
        <div class="card-header text-center text-white" style="background: linear-gradient(45deg,#4e73df,#1cc88a);">
            <h4 class="mb-0"><i class="fas fa-list"></i> Lista de Estudiantes</h4>
        </div>
        <div class="card-body p-3">
            <div class="table-responsive">
                <table class="table table-hover table-bordered align-middle text-center mb-0">
                    <thead>
                        <tr>
                            <th style="width:6%;">ID</th>
                            <th>Nombre</th>
                            <th>Apellido</th>
                            <th style="width:8%;">Edad</th>
                            <th>Correo</th>
                            <th style="width:18%;">Acciones</th>
                        </tr>
                    </thead>
                    <tbody>
                        @if (Model != null && Model.Count > 0)
                        {
                            foreach (var estudiante in Model)
                            {
                                <tr data-id="@estudiante.Id">
                                    <td class="td-id">@estudiante.Id</td>
                                    <td class="td-nombre">@estudiante.Nombre</td>
                                    <td class="td-apellido">@estudiante.Apellido</td>
                                    <td class="td-edad">@estudiante.Edad</td>
                                    <td class="td-correo">@estudiante.Correo</td>
                                    <td>
                                        <button type="button" class="btn btn-sm btn-warning me-1" onclick="abrirEditar(@estudiante.Id)">
                                            <i class="fas fa-edit"></i> Editar
                                        </button>
                                        <button type="button" class="btn btn-sm btn-danger" onclick="confirmarEliminar(@estudiante.Id)">
                                            <i class="fas fa-trash"></i> Eliminar
                                        </button>
                                    </td>
                                </tr>
                            }
                        }
                        else
                        {
                            <tr>
                                <td colspan="6" class="text-muted">No hay estudiantes registrados</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>

<!-- Modal para edición -->
<div class="modal fade" id="estudianteModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered modal-lg modal-dialog-scrollable">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="modalTitulo">Editar estudiante</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Cerrar"></button>
            </div>
            <div class="modal-body">
                <form id="formEditar" method="post" novalidate>
                    @Html.AntiForgeryToken()
                    <input type="hidden" id="form-id" name="Id" />
                    <div class="row g-2">
                        <div class="col-md-6">
                            <label for="form-nombre" class="form-label">Nombre</label>
                            <input type="text" id="form-nombre" name="Nombre" class="form-control" required />
                        </div>
                        <div class="col-md-6">
                            <label for="form-apellido" class="form-label">Apellido</label>
                            <input type="text" id="form-apellido" name="Apellido" class="form-control" required />
                        </div>
                        <div class="col-md-4">
                            <label for="form-edad" class="form-label">Edad</label>
                            <input type="number" min="1" max="120" id="form-edad" name="Edad" class="form-control" required />
                        </div>
                        <div class="col-md-8">
                            <label for="form-correo" class="form-label">Correo</label>
                            <input type="email" id="form-correo" name="Correo" class="form-control" required />
                        </div>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button id="btnGuardarCambios" type="button" class="btn btn-success">
                    <i class="fas fa-save"></i> Guardar cambios
                </button>
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cerrar</button>
            </div>
        </div>
    </div>
</div>

<script>
    // Captura el token antiforgery desde el formulario dentro del modal
    function obtenerToken() {
        return $('#formEditar input[name="__RequestVerificationToken"]').val();
    }

    // Abrir modal editar (formulario)
    function abrirEditar(id) {
        $.get('/RegistroEstudiantes/ObtenerEstudiante/' + id)
            .done(function (res) {
                if (!res || res.success === false) {
                    Swal.fire('Error', res?.message || 'No se pudo obtener el estudiante', 'error');
                    return;
                }
                const d = res.data;
                $('#modalTitulo').text('Editar estudiante');
                $('#form-id').val(d.Id);
                $('#form-nombre').val(d.Nombre);
                $('#form-apellido').val(d.Apellido);
                $('#form-edad').val(d.Edad);
                $('#form-correo').val(d.Correo);

                const modal = new bootstrap.Modal(document.getElementById('estudianteModal'));
                modal.show();
            })
            .fail(function () {
                Swal.fire('Error', 'Error al comunicarse con el servidor', 'error');
            });
    }

    // Guardar cambios edición via AJAX
    $('#btnGuardarCambios').on('click', function () {
        const id = $('#form-id').val();
        const nombre = $('#form-nombre').val().trim();
        const apellido = $('#form-apellido').val().trim();
        const edad = $('#form-edad').val();
        const correo = $('#form-correo').val().trim();

        if (!nombre || !apellido || !correo || edad === '') {
            Swal.fire('Aviso', 'Complete todos los campos', 'warning');
            return;
        }

        const postData = {
            Id: id,
            Nombre: nombre,
            Apellido: apellido,
            Edad: edad,
            Correo: correo,
            __RequestVerificationToken: obtenerToken()
        };

        $.ajax({
            url: '/RegistroEstudiantes/ActualizarEstudiante',
            type: 'POST',
            data: postData,
            success: function (res) {
                if (res && res.success) {
                    // actualizar fila en la tabla sin recargar
                    const $tr = $('tr[data-id="' + id + '"]');
                    $tr.find('.td-nombre').text(nombre);
                    $tr.find('.td-apellido').text(apellido);
                    $tr.find('.td-edad').text(edad);
                    $tr.find('.td-correo').text(correo);

                    // cerrar modal y mostrar alerta
                    const modalEl = document.getElementById('estudianteModal');
                    const modalInst = bootstrap.Modal.getInstance(modalEl);
                    if (modalInst) modalInst.hide();

                    Swal.fire({ icon: 'success', title: res.message || 'Estudiante actualizado', timer: 1500, showConfirmButton: false });
                } else {
                    Swal.fire('Error', res?.message || 'No se pudo actualizar', 'error');
                }
            },
            error: function (xhr) {
                const msg = xhr.responseJSON?.message || xhr.responseText || 'Error del servidor';
                Swal.fire('Error', msg, 'error');
            }
        });
    });

    // Confirmar eliminar con formulario POST
    function confirmarEliminar(id) {
        Swal.fire({
            title: '¿Está seguro?',
            text: 'Esta acción eliminará al estudiante de forma permanente.',
            icon: 'warning',
            showCancelButton: true,
            confirmButtonText: 'Sí, eliminar',
            cancelButtonText: 'Cancelar'
        }).then((result) => {
            if (result.isConfirmed) {
                // Crear un formulario para enviar POST con antiforgery token
                const form = document.createElement('form');
                form.method = 'post';
                form.action = '/RegistroEstudiantes/Eliminar/' + id;

                const tokenInput = document.createElement('input');
                tokenInput.type = 'hidden';
                tokenInput.name = '__RequestVerificationToken';
                tokenInput.value = obtenerToken();
                form.appendChild(tokenInput);

                document.body.appendChild(form);
                form.submit();
            }
        });
    }

    // Mostrar mensaje SweetAlert al cargar la página si existe TempData
    @if (TempData["SweetAlertMessage"] != null)
    {
            <text>
            Swal.fire({
                icon: '@TempData["SweetAlertIcon"]',
                title: '@TempData["SweetAlertMessage"]',
                timer: 2000,
                showConfirmButton: false
            });
            </text>
    }
</script>
